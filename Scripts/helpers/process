#!/bin/bash

FIRMWARE_PATH="$REPO/Firmware"

GOGO_PATH="$REPO/Launchers/gogo/"
RETRO_PATH="$REPO/Launchers/retro-esp32/"
GENERIC_PATH="$REPO/Launchers/emulator-launcher-odroid-go/"
GOPLAY_PATH="$REPO/Emulators/go-play/"
SUPER_GOPLAY_PATH="$REPO/Emulators/super-go-play/"
EMULATOR_PATH="$REPO/Emulators/"

MKFW_PATH="$REPO/Odroid/odroid-go-firmware/tools/mkfw"
LAUNCHER_PATH=""
LAUNCHER=""
BIN=""
TILE=""
NAME=""

# set_nes_option
set_nes_option() {
  clear
  SUPER="n"
  OPTION="${bomb}  Would you like to use ${magenta}'Super Go Play'? ${nc}[y/${bold}N${nc}]"
  echo "--------------------------------------------------------------------------"
  echo -e "${OPTION}"
  echo "--------------------------------------------------------------------------"
  read -n 1 -r response
  if [[ "$response" = "y" ]]
  then
    SUPER="y"
  fi
  clear
}

# get_nes_option
get_nes_option() {
  if [[ "$SUPER" = "y" ]]
  then
    cd $SUPER_GOPLAY_PATH
  fi
}

# set_config_option
set_config_option() {
  clear
  CONFIG="n"
  OPTION="${memo}  Would you like to run ${magenta}'make menuconfig'? ${nc}[y/${bold}N${nc}]"
  echo "--------------------------------------------------------------------------"
  echo -e "${OPTION}"
  echo "--------------------------------------------------------------------------"
  read -n 1 -r response
  if [[ "$response" = "y" ]]
  then
    CONFIG="y"
  fi
  clear
}

# get_config_option
get_config_option() {
  if [[ "$CONFIG" = "y" ]]
  then
    make menuconfig
  fi
}

# set_clean_option
set_clean_option() {
  clear
  CLEAN="n"
  OPTION="${bomb}  Would you like to run ${magenta}'make clean'? ${nc}[y/${bold}N${nc}]"
  echo "--------------------------------------------------------------------------"
  echo -e "${OPTION}"
  echo "--------------------------------------------------------------------------"
  read -n 1 -r response
  if [[ "$response" = "y" ]]
  then
    CLEAN="y"
  fi
  clear
}

# get_clean_option
get_clean_option() {
  if [[ "$CLEAN" = "y" ]]
  then
    make clean
  fi
}

OPTION="${pad}  ${red}Please Select a ${cyan}Launcher? ${nc}"
echo "--------------------------------------------------------------------------"
echo -e "${OPTION}"
echo "--------------------------------------------------------------------------"
select launcher in "RetroESP32" "GoGo" "Generic" "Exit"; do
  case $launcher in
    GoGo )
      LAUNCHER="GoGo"
      LAUNCHER_PATH=${GOGO_PATH}
      BIN="gogo"
      TILE="gogo"
      NAME="GoGo"
    break;;
    RetroESP32 )
      LAUNCHER="RetroESP32"
      LAUNCHER_PATH=${RETRO_PATH}
      BIN="retro-esp32"
      TILE="retro-esp32"
      NAME="Retro ESP32"
    break;;
    Generic )
      LAUNCHER="Generic"
      LAUNCHER_PATH=${GENERIC_PATH}
      BIN="emulator-launcher-odroid-go"
      TILE="generic"
      NAME="Emulator"
    break;;
    Exit )
      exit
    break;;
    * ) echo -e "${OPTION}";;
  esac
done
clear

echo "--------------------------------------------------------------------------"
echo -e "${wrench}  ${red}Recompile ${cyan}Launcher? ${nc}[y/${bold}N${nc}]"
echo "--------------------------------------------------------------------------"
read -n 1 -r response
if [[ "$response" = "y" ]]
then
  set_clean_option
  set_config_option

  echo "--------------------------------------------------------------------------"
  echo -e "${wrench}  ${green}Compiling ${cyan}Launcher${nc}"
  echo "--------------------------------------------------------------------------"

  rm $FIRMWARE_PATH/Bins/bootloader.bin
  rm $FIRMWARE_PATH/Bins/partitions.bin

  if [[ "$LAUNCHER" = "GoGo" ]]
  then
    rm $FIRMWARE_PATH/Bins/gogo.bin
  fi

  if [[ "$LAUNCHER" = "RetroESP32" ]]
  then
    rm $FIRMWARE_PATH/Bins/retro-esp32.bin
  fi

  if [[ "$LAUNCHER" = "Generic" ]]
  then
    rm $FIRMWARE_PATH/Bins/emulator-launcher-odroid-go.bin
  fi

  cd $LAUNCHER_PATH
  get_clean_option
  get_config_option
  make -j8
  cp ./build/bootloader/bootloader.bin $FIRMWARE_PATH/Bins/
  cp ./build/partitions.bin $FIRMWARE_PATH/Bins/

  if [[ "$LAUNCHER" = "GoGo" ]]
  then
    cp ./build/gogo.bin $FIRMWARE_PATH/Bins/
  fi

  if [[ "$LAUNCHER" = "RetroESP32" ]]
  then
    cp ./build/retro-esp32.bin $FIRMWARE_PATH/Bins/
  fi

  if [[ "$LAUNCHER" = "Generic" ]]
  then
    cp ./build/emulator-launcher-odroid-go.bin $FIRMWARE_PATH/Bins/
  fi
fi
clear

echo "--------------------------------------------------------------------------"
echo -e "${game}  ${red}Recompile ${cyan}Emulators? ${nc}[y/${bold}N${nc}]"
echo "--------------------------------------------------------------------------"
read -n 1 -r response
if [[ "$response" = "y" ]]
then
  set_clean_option
  set_config_option
  set_nes_option

  cd $SUPER_GOPLAY_PATH

  clear
  echo "--------------------------------------------------------------------------"
  echo -e "${game}  ${green}Compiling ${cyan}gnuboy-go${nc}"
  echo "--------------------------------------------------------------------------"
  cd gnuboy-go
  get_clean_option
  get_config_option
  make -j8
  cp ./build/gnuboy-go.bin $FIRMWARE_PATH/Bins/

  cd $GOPLAY_PATH
  get_nes_option
  clear
  echo "--------------------------------------------------------------------------"
  echo -e "${game}  ${green}Compiling ${cyan}nesemu-go${nc}"
  echo "--------------------------------------------------------------------------"
  cd nesemu-go
  get_clean_option
  get_config_option
  make -j8
  cp ./build/nesemu-go.bin $FIRMWARE_PATH/Bins/

  cd $GOPLAY_PATH
  clear
  echo "--------------------------------------------------------------------------"
  echo -e "${game}  ${green}Compiling ${cyan}smsplusgx-go${nc}"
  echo "--------------------------------------------------------------------------"
  #cd ../smsplusgx-go
  cd smsplusgx-go
  get_clean_option
  get_config_option
  make -j8
  cp ./build/smsplusgx-go.bin $FIRMWARE_PATH/Bins/


  clear
  echo "--------------------------------------------------------------------------"
  echo -e "${game}  ${green}Compiling ${cyan}prosystem-odroid-go${nc}"
  echo "--------------------------------------------------------------------------"
  cd $EMULATOR_PATH
  cd prosystem-odroid-go
  get_clean_option
  get_config_option
  make -j8
  cp ./build/prosystem-go.bin $FIRMWARE_PATH/Bins/

  clear
  echo "--------------------------------------------------------------------------"
  echo -e "${game}  ${green}Compiling ${cyan}stella-odroid-go${nc}"
  echo "--------------------------------------------------------------------------"
  cd $EMULATOR_PATH
  cd stella-odroid-go
  get_clean_option
  get_config_option
  make -j8
  cp ./build/stella-go.bin $FIRMWARE_PATH/Bins/

  clear
  echo "--------------------------------------------------------------------------"
  echo -e "${game}  ${green}Compiling ${cyan}handy-go${nc}"
  echo "--------------------------------------------------------------------------"
  cd $EMULATOR_PATH
  cd handy-go
  get_clean_option
  get_config_option
  make -j8
  cp ./build/handy-go.bin $FIRMWARE_PATH/Bins/

  clear
  echo "--------------------------------------------------------------------------"
  echo -e "${game}  ${green}Compiling ${cyan}pcengine-go${nc}"
  echo "--------------------------------------------------------------------------"
  cd $EMULATOR_PATH
  cd odroid-go-pcengine-huexpress/pcengine-go
  get_clean_option
  get_config_option
  make -j8
  cp ./build/pcengine-go.bin $FIRMWARE_PATH/Bins/

  clear
  echo "--------------------------------------------------------------------------"
  echo -e "${game}  ${green}Compiling ${cyan}spectrum-go${nc}"
  echo "--------------------------------------------------------------------------"
  cd $EMULATOR_PATH
  cd odroid-go-spectrum-emulator
  get_clean_option
  get_config_option
  make -j8
  cp ./build/spectrum.bin $FIRMWARE_PATH/Bins/
fi

cd $SRC_PATH
